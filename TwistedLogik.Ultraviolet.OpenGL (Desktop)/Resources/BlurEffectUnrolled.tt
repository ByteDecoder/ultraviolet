<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".frag" #>
<#+ 
private void BlurEffect(Single radius) {#>
#version 140

uniform sampler2D Texture;

uniform float Resolution;
uniform float Mix;
uniform vec2  Direction;

in vec4 vColor;
in vec2 vTextureCoordinate;

out vec4 fColor;

void main()
{
	// Modified from http://callumhay.blogspot.com/2010/09/gaussian-blur-shader-glsl.html

	float step = 1.0 / Resolution;

<#+
	var incGaussX = 1.0 / (Math.Sqrt(2.0 * Math.PI) * radius);
	var incGaussY = Math.Exp(-0.5 / (radius * radius));
	var incGaussZ = incGaussY * incGaussY;
	var coefficientSum = incGaussX;
#>
	vec4 avgValue = vec4(0.0, 0.0, 0.0, 0.0);
	avgValue += texture2D(Texture, vTextureCoordinate.xy) * <#=incGaussX#>;
<#+ 
	incGaussX *= incGaussY;
	incGaussY *= incGaussZ;
#>
<#+for (int i = 1; i <= (Int32)radius; i++) {#>
	avgValue += texture2D(Texture, vTextureCoordinate.xy - (float(<#=i#>) * step * Direction)) * <#=incGaussX#>;
	avgValue += texture2D(Texture, vTextureCoordinate.xy + (float(<#=i#>) * step * Direction)) * <#=incGaussX#>;
<#+
	coefficientSum += 2.0 * incGaussX;
	incGaussX *= incGaussY;
	incGaussY *= incGaussZ;
}#>

	vec4 blur = avgValue / <#=coefficientSum#>;
	vec4 outBlurred = blur * vColor.a;	
	vec4 outColored = vColor * blur.a;
		
	gl_FragColor = mix(outBlurred, outColored, Mix);
}
<#+}#>
